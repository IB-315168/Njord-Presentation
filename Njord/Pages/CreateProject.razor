@page "/CreateProject"
@using Domain.DTOs
@using Domain.DTOs.LogBook
@using Domain.DTOs.Project
@using Domain.DTOs.Team
@using HttpClients.ClientInterfaces
@inject ITeamService teamService
@inject IProjectService projectService
@inject ILogBookService LogBookService
@inject AuthenticationStateProvider asp

<AuthorizeView>
    <NotAuthorized>
        <label>You must be logged in to perform that action.</label>
    </NotAuthorized>
    <Authorized>
        <div class="card">
            <h3>Create project</h3>
            <div class="form-group field">
                <label>Project name:</label>
                <input type="text" @bind="projectName" @bind:event="oninput" />
                <label>Team assigned:</label>
                @if (memberTeams.Count() == 0) {
                    <p>You have to be a teamleader of a team in order to create a project</p>
                } else {
                    <EditForm Context="dtoContext" Model="@dto">
                        <InputSelect @bind-Value="@dto.TeamId">

                            @foreach (TeamBasicDTO teamBasicDTO in memberTeams)
                            {
                                <option value=@teamBasicDTO.Id>@teamBasicDTO.Name</option>
                            }
                        </InputSelect>
                        <label>Deadline (optional):</label>
                        <InputDate @bind-Value="@dto.Deadline"></InputDate>
                    </EditForm>
                }

                @if (!string.IsNullOrEmpty(resultMsg))
                {
                    <label style="color: @color">@resultMsg</label>
                }
            </div>
            <div class="button-row">
                <button @onclick="Create" disabled="@(string.IsNullOrEmpty(projectName) && memberTeams.Count() == 0)" class="acceptbtn">
                    Create project
                </button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private int teamId { get; set; }
    private string projectName { get; set; }
    private DateTime? deadline { get; set; }
    private ProjectCreateDTO dto = new ProjectCreateDTO();
    private LogBookCreateDTO logbookDTO = new LogBookCreateDTO();
    private List<TeamBasicDTO> memberTeams = new List<TeamBasicDTO>();

    private string color { get; set; }
    private string resultMsg { get; set; }

    protected override async Task OnInitializedAsync()
    {
        resultMsg = "";

        try {
            int id = Int32.Parse(asp.GetAuthenticationStateAsync().Result
                .User.Claims.First(c => c.Type.Equals("Id")).Value);
            string teamLeaderName = asp.GetAuthenticationStateAsync().Result
                .User.Claims.First(c => c.Type.Equals("FullName")).Value;

            IEnumerable<TeamBasicDTO> allTeams = await teamService.GetByUserIdAsync(id);

            foreach(TeamBasicDTO team in allTeams) {
                if(team.TeamLeaderName.Equals(teamLeaderName)) {
                    memberTeams.Add(team);
                }
            }

            if(memberTeams.Count != 0) {
                dto.TeamId = memberTeams.FirstOrDefault().Id;
            }
        dto.Deadline = DateTime.Today;
            logbookDTO.ProjectId = teamId;
        } catch (Exception e) {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }

    private async Task Create()
    {
        resultMsg = "";

        try
        {
            int id = Int32.Parse(asp.GetAuthenticationStateAsync().Result
                .User.Claims.First(c => c.Type.Equals("Id")).Value);

            dto.Name = projectName;

    //    Console.WriteLine(dto.TeamId);
            //dto.Name = projectName;
            //dto.TeamId = teamId;
            //if(deadline != null) {
            //    dto.Deadline = (DateTime) deadline;
            //}

            Console.WriteLine(dto.TeamId);

            await projectService.CreateAsync(dto);
            projectName = "";
            color = "green";
            resultMsg = "Project successfully created";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }

}
