@page "/EditProfile/{id:int}"
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using UIComponents
@inject IMemberService userService
@inject IAuthService authService
@inject NavigationManager navMgr

@if(dto == null) {
    <label>Loading edit profile...</label>
} else {
    <AuthorizeView>
        <NotAuthorized><label>You must be logged in to perform that action</label></NotAuthorized>
        <Authorized>
            <h3>Edit Profile - @context.User.Identity.Name</h3>
            <div class="form-group">
                <div class="form-group field">
                    <label>Username:</label>
                    <input type="text" @bind="dto.UserName" />
                </div>
                <div class="form-group field">
                    <label>Email:</label>
                    <input type="email" @bind="dto.Email" />
                </div>
                <div class="form-group field">
                    <label>Password:</label>
                    <input type="password" @bind="dto.Password" />
                </div>
                <button @onclick="UpdateAsync" class="acceptbtn">Save changes</button>
            </div>
            @*<Availability RecurAval=@dto.RecurAvailablity OnChange="(aval) => SetAvailability(aval)"></Availability>*@
        </Authorized>
    </AuthorizeView>
}

@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private MemberUpdateDTO dto = null!;
    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";

        MemberBasicDTO userData = await userService.GetByIdAsync(Id);

        dto = new MemberUpdateDTO(Id)
            {
                UserName = userData.UserName,
                Email = userData.Email,
                Password = "",
                RecurAvailablity = new Dictionary<string, bool[]>()
            };
    }   

    //private void SetAvailability(Dictionary<string, bool[]> availability) {
    //    dto.RecurAvailablity = availability;
    //    Console.WriteLine("test");
    //    Console.WriteLine($"{dto.RecurAvailablity["Mon"][0]}, {availability["Mon"][0]}");
    //}

    private async Task UpdateAsync()
    {
        try
        {
            await userService.UpdateAsync(dto);
            await authService.LogoutAsync();
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}
