@page "/signup"
@using Domain.DTOs
@using Domain.DTOs.Member
@using HttpClients.ClientInterfaces
@inject IMemberService memberService

<div class="card">
    <h3>Sign Up</h3>
    <div class="form-group field">
        <label>Full name:</label>
        <input type="text" @bind="fullName" @bind:event="oninput"/>
        <label>User name:</label>
        <input type="text" @bind="userName" @bind:event="oninput"/>
        <label>E-mail:</label>
        <input type="email" @bind="email" @bind:event="oninput"/>
        <label>Password:</label>
        <input type="password" @bind="password" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="button-row">
        <button @onclick="Create" disabled="@(string.IsNullOrEmpty(fullName) ||
            string.IsNullOrEmpty(userName) ||
            string.IsNullOrEmpty(email) || 
            string.IsNullOrEmpty(password))" class="acceptbtn">Create account</button>
    </div>
</div>

@code {
    private string fullName = "";
    private string userName = "";
    private string email = "";
    private string password = "";
    private string resultMsg = "";
    private string color = "";

    private async Task Create()
    {
        resultMsg = "";

        try
        {
            await memberService.CreateAsync(new MemberCreateDTO() {
                FullName = fullName,
                UserName = userName,
                Email = email,
                Password = password
            });

            fullName = "";
            userName = "";
            email = "";
            password = "";
            color = "green";
            resultMsg = "Account successfully created";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }
}
