@page "/profile/{id:int}"
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using UIComponents
@inject IUserService userService
@inject ITeamService teamService
@inject NavigationManager navMgr

@if (user == null)
{
    <label>Loading User profile..</label>
}
else if (userService.User == null) {
    <label>You must be logged in to perform that action</label>
}
else {
    <h3>Profile - @user.UserName</h3>
    @if(userService.User.Id == Id) {
        <div class="editProfile">
            <button class="acceptbtn" @onclick="@(() => navMgr.NavigateTo($"/EditProfile"))">Edit profile</button>
            <button class="deletebtn" @onclick="DeleteProfile">Delete profile</button>
        </div>
    }
    <div class="details">
        <table>
            <tr>
                <td><b>Full name:</b></td>
                <td>@user.FullName</td>
            </tr>
            <tr>
                <td><b>User name:</b></td>
                <td>@user.UserName</td>
            </tr>
            <tr>
                <td><b>Email:</b></td>
                <td><a href="mailto:@user.Email">@user.Email</a></td>
            </tr>
        </table>
    </div>
    <div class="user-teams">
        <h3>Teams</h3>
        @if(userTeams.Count() == 0) {
            <label>This user does not belong to any teams.</label>
        }
        else {
            @foreach(TeamBasicDTO team in userTeams) {
                <div class="team-card" @onclick="@(() => navMgr.NavigateTo($"/team/{team.Id}"))">
                    <div id="teamName">@team.Name</div>
                    <label id="teamLeaderName">@team.TeamLeaderName</label>
                </div>
            }
        }
    </div>
    <div class="availability">
        @*<Availability RecurAval=@user.RecurAvailablity Editable="disabled"></Availability>*@
    </div>

    <Popup ShowPopup="showPopup">
        <h3>Warning</h3>
        <label>You are about to delete your profile. Confirm that action by typing your password in field below.</label>
        <input type="text" @bind="removeConfirmation" />
        <button disabled="@(string.IsNullOrEmpty(removeConfirmation) || !userService.User.Password.Equals(removeConfirmation))" @onclick="Proceed">Confirm</button>
    </Popup>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private string msg = "";

    private UserBasicDTO user = null!;
    private IEnumerable<TeamBasicDTO> userTeams = null!;

    private bool showPopup = false;
    private string removeConfirmation = "";


    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            await userService.InitializeAsync();
            user = await userService.GetByIdAsync(Id);
            userTeams = await teamService.GetByUserIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void DeleteProfile() {
        showPopup = true;
    }

    private async Task Proceed()
    {
        msg = "";
        try
        {
            await userService.DeleteAsync(userService.User.Id);
            await userService.LogoutAsync();
            navMgr.NavigateTo("/", forceLoad: true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }    
}
