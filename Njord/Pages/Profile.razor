@page "/profile/{id:int}"
@using Domain.DTOs
@using Domain.DTOs.Member
@using Domain.DTOs.Team
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using UIComponents
@using Radzen
@using Radzen.Blazor
@inject IMemberService memberService
@inject ITeamService teamService
@inject IAuthService authService
@inject NavigationManager navMgr

@if (member == null)
{
    <label>Loading member profile..</label>
}
else  {
    <AuthorizeView>
        <NotAuthorized><label>You must be logged in to perform that action</label></NotAuthorized>
        <Authorized>
            <h3>Profile - @member.FullName</h3>
            @if (@context.User.Claims.First(c => c.Type.Equals("Id")).Value.Equals(member.Id.ToString()))
            {
                <div class="editProfile">
                    <button class="acceptbtn" @onclick="@(() => navMgr.NavigateTo($"/EditProfile/{@context.User.Claims.First(c => c.Type.Equals("Id")).Value}"))">Edit profile</button>
                    <button class="deletebtn" @onclick="DeleteProfile">Delete profile</button>
                </div>
            }
            <div class="details">
                <table>
                    <tr>
                        <td><b>Full name:</b></td>
                        <td>@member.FullName</td>
                    </tr>
                    <tr>
                        <td><b>User name:</b></td>
                        <td>@member.UserName</td>
                    </tr>
                    <tr>
                        <td><b>Email:</b></td>
                        <td><a href="mailto:@member.Email">@member.Email</a></td>
                    </tr>
                </table>
            </div>
            <div class="user-teams">
                <h3>Teams</h3>
                @if (memberTeams.Count() == 0)
                {
                    <label>This user does not belong to any teams.</label>
                }
                else
                {
                    @foreach (TeamBasicDTO team in memberTeams)
                    {
                        <div class="team-card" @onclick="@(() => navMgr.NavigateTo($"/team/{team.Id}"))">
                            <div id="teamName">@team.Name</div>
                            <label id="teamLeaderName">@team.TeamLeaderName</label>
                        </div>
                    }
                }
            </div>
            <div class="availability">
                <hr />
                <h3>Availability</h3>
                <RadzenScheduler Data="@data" TItem="DataItem" StartProperty="StartDate" EndProperty="EndDate" TextProperty="Text">
                    <RadzenWeekView />
                </RadzenScheduler>
            </div>

            <Popup ShowPopup="showPopup">
                <h3>Warning</h3>
                <label>You are about to delete your profile. Confirm that action by typing <b>@context.User.Identity.Name</b> in field below.</label>
                <input type="text" @bind="removeConfirmation" @bind:event="oninput"/>
                <button disabled="@(string.IsNullOrEmpty(removeConfirmation) || !removeConfirmation.Equals(context.User.Identity.Name))" @onclick="Proceed">Confirm</button>
            </Popup>
        </Authorized>
    </AuthorizeView>   
}

@code {

    //Radzen Scheduler

    class DataItem
    {
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Text { get; set; }
    }

    DataItem[] data = new DataItem[]
    {
      new DataItem
      {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today.AddDays(1),
        Text = "Blazor test"
      },
      new DataItem
      {
          StartDate = new DateTime(2022, 12, 24),
          EndDate = new DateTime(2022, 12, 24).AddDays(1),
          Text = "Christmas"
      },
      new DataItem
      {
          StartDate = new DateTime(2022, 11, 25, 11, 50, 0),
          EndDate = new DateTime(2022, 11, 25, 12, 45, 0),
          Text = "Meeting - JOOK"
      },
    };

    //Radzen Scheduler



    [Parameter]
    public int Id { get; set; }
    private string msg = "";

    private MemberBasicDTO member = null!;
    private IEnumerable<TeamBasicDTO> memberTeams = null!;

    private bool showPopup = false;
    private string removeConfirmation = "";


    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            member = await memberService.GetByIdAsync(Id);
            memberTeams = await teamService.GetByUserIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void DeleteProfile() {
        showPopup = true;
    }

    private async Task Proceed()
    {
        msg = "";
        try
        {
            await memberService.DeleteAsync(member.Id);
            await authService.LogoutAsync();
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }    
}
