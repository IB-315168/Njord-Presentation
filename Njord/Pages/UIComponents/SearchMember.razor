@namespace UIComponents
@using Domain.DTOs
@using Domain.Models
@using System.Diagnostics.CodeAnalysis
@using HttpClients.ClientInterfaces
@inject IMemberService memberService
@inject NavigationManager navMgr

<div class="form-group">
    <div class="form-group field">
        <label>Username:</label>
        <input type="text" @bind="userName" />
    </div>
    <div class="form-group field">
        <label>Full name:</label>
        <input type="text" @bind="fullName" />
    </div>    
    <div class="form-group field">
        <label>Email:</label>
        <input type="email" @bind="email" />
    </div>
    <button @onclick="@Search" class="acceptbtn">Search</button>
    <button @onclick="@Clear" class="acceptbtn">Clear</button>
</div>

<div class="user-list">
    @if (members == null) {
        <label>Loading members...</label>
    }
    else if (!members.Any())
    {
        <label>No members found matching criteria.</label>
    }
    else {
        <div class="members">
            <table class="table">
                <thead>
                    <tr>
                        <th>User name</th>
                        <th>Full name</th>
                        <th>E-mail</th>
                        @if (Edit)
                        {
                            <th>Team member?</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (Member member in members)
                    {
                        <tr>
                            <td><a href="/profile/@member.Id">@member.UserName</a></td>
                            <td>@member.FullName</td>
                            <td>@member.Email</td>
                            @if (Edit)
                            {
                                <td><input type="checkbox"
                               checked="@teamMembers.Contains(member)"
                               @onchange="(arg) => OnChange.InvokeAsync(member)" />
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>
@if (!string.IsNullOrEmpty(errorMsg))
{
    <label style="color: red">@errorMsg</label>
}

@code {
    [Parameter]
    public bool Edit { get; set; }
    [Parameter]
    public Member teamLeader { get; set; }
    [Parameter]
    public ICollection<Member> members { get; set; }
    [Parameter]
    public ICollection<Member> teamMembers { get; set; }
    [Parameter]
    public EventCallback<Member> OnChange { get; set; }

    private string userName = "";
    private string email = "";
    private string fullName = "";
    private string errorMsg = "";

    protected override async Task OnInitializedAsync()
    {
        if(teamMembers == null) {
            teamMembers = new List<Member>();
        }
        await Search();
    }

    private async Task Search() {
        try {
            members = await memberService.GetAsync(userName, email, fullName);
            if (Edit) {
                members.Remove(teamLeader);
            }
        }
        catch (Exception e) 
        {
            errorMsg = e.Message;
        }
    }

    private async Task Clear() {
        userName = "";
        email = "";
        fullName = "";
        await Search();
    }
}
