@namespace UIComponents

<h4>Availability</h4>
    <div class="days">
    @foreach (string s in RecurAval.Keys)
    {
            <label>@s</label>
        }
    </div>
    <div class="hours">
        @for(int i = 7; i < 24; i++) {
            <label>@i:00</label>
        }
    </div>

    <div class="container">
    @foreach (string s in RecurAval.Keys){
        int i = 0;
        <div class="col">
            @foreach(bool val in RecurAval[s])
            {
                <div class="row">
                    <div id="check">
                        <input type="checkbox" disabled="@Editable" id="@s,@i" checked="@val" @onchange="@((args) => {SetValue(s,i,(bool)args.Value!);})"/>
                        <label class="test" for="@s,@i"></label>
                    </div>
                </div>
                i++;
            }
            </div>
    }
    </div>

@code {
    [Parameter]
    public string Editable { get; set; }

    [Parameter]
    public EventCallback<Dictionary<string, bool[]>> OnChange { get; set; }

    [Parameter]
    public Dictionary<string, bool[]> RecurAval { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (RecurAval == null)
        {
            RecurAval = new Dictionary<string, bool[]>();
            RecurAval.Add("Mon", new bool[64]);
            RecurAval.Add("Tue", new bool[64]);
            RecurAval.Add("Wed", new bool[64]);
            RecurAval.Add("Thu", new bool[64]);
            RecurAval.Add("Fri", new bool[64]);
            RecurAval.Add("Sat", new bool[64]);
            RecurAval.Add("Sun", new bool[64]);

            RecurAval["Mon"][0] = true;
        }
    }

    private void SetValue(string s, int r, bool status) {
        Console.WriteLine($"{s},{r},{status}");
        RecurAval[s][r] = status;
        Console.WriteLine(s + r + status);
        OnChange.InvokeAsync(RecurAval);
    }

}
