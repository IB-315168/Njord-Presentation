@namespace UIComponents
@using Domain.DTOs.LogBook
@using Domain.DTOs.Meeting
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IMeetingService meetingService
@inject ILogBookService LogbookService
<Popup @ref="CreateEntry">
    <h3>Create entry</h3>
    <div class="card">
        <label>Title:</label>
        <p>@SelectedMeetingCreate.Title</p><br/>
        <label >Description:</label>
        <textarea @bind="content"></textarea>
        <button class="acceptbtn" @onclick="UpdateLogbook">Create Entry</button>
    </div>

</Popup>

@code {
    [Parameter]
    public ProjectEntity ProjectLoaded { get; set; }
    [Parameter]
    public MeetingEntity SelectedMeetingCreate { get; set; }
    [Parameter]
    public LogBookEntryCreateDTO CreateEntryDTO { get; set; }
    [Parameter]
    public LogBookUpdateDTO updateLogbookDTO { get; set; }
    [Parameter]
    public LogBookEntity LogBookEntity { get; set; }
    [Parameter]
    public EventCallback UpdateView { get; set; }
    
    private int id;
    private string title;
    private string content;

    private MeetingEntity MeetingEntity { get; set; }
    public Popup CreateEntry { get; set; }
    private string msg = "";
    private ProjectEntity projectLoaded { get; set; }


    


    private async Task UpdateLogbook()
    {
        try
        {
            Console.WriteLine(content);
            Console.WriteLine(SelectedMeetingCreate);
            LogBookEntryEntity entry = new LogBookEntryEntity(SelectedMeetingCreate.Id, LogBookEntity.Id, SelectedMeetingCreate, content);
            Console.WriteLine("content");
            updateLogbookDTO.entries.Add(entry);
            LogbookService.UpdateAsync(updateLogbookDTO);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    

}