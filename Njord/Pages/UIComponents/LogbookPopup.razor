@namespace UIComponents
@using Domain.DTOs.LogBook
@using Domain.DTOs.Meeting
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IMeetingService meetingService
@inject ILogBookService LogBookService;
<Popup @ref="CreateEntry">
    <h3>Create entry</h3>
    <div class="card">
        <label>Title:</label>
        <input type="text"/><br/>
        <label>Description:</label>
        @if (meetings!=null)
        {
            <select>
                @foreach (MeetingEntity meeting in meetings)
                {
                    <option class="card">
                        <p style="border: 1px solid; padding: 5px">@meeting.Title</p>
                    </option>
                }
            </select>
        }

        <button class="acceptbtn" @onclick="CreateEntryClicked">Create Entry</button>
    </div>
</Popup>

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public ProjectEntity ProjectLoaded { get; set; }

    [Parameter]
    public LogBookEntryCreateDTO CreateEntryDTO { get; set; }

    private LogBookUpdateDTO LogBookUpdateDto { get; set; }
    public Popup CreateEntry { get; set; }
    private MeetingCreateDTO createMeetingDTO = new MeetingCreateDTO();
    private ICollection<MeetingEntity> meetings { get; set; }
    private string msg = "";
    private ProjectEntity projectLoaded { get; set; }
    [Parameter]
    public EventCallback UpdateView { get; set; }

    private async Task CreateEntryClicked()
    {
        try
        {
    // CreateEntry.Close();
    // await LogBookService.UpdateAsync(new LogBookUpdateDTO()
    // {
    //     new LogBookEntryEntity()
    // })
    // await UpdateView.InvokeAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            meetings = await meetingService.GetByProjectIdAsync(Id);

            createMeetingDTO.AssignedLeader = projectLoaded.Team.TeamLeader.Id;
            createMeetingDTO.StartDate = DateTime.Now;
            createMeetingDTO.EndDate = DateTime.Now.AddHours(1);
            createMeetingDTO.ProjectAssigned = Id;
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}