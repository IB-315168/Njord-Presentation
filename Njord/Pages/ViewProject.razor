@page "/project/{id:int}"
@using Domain.DTOs
@using Domain.DTOs.LogBook
@using Domain.DTOs.Meeting
@using Domain.DTOs.Project
@using Domain.DTOs.Task
@using Domain.Models
@using global::UIComponents
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using UIComponents
@using Radzen
@using Radzen.Blazor
@using System.Collections
@inject IProjectService projectService
@inject ILogBookService LogbookService
@inject IMeetingService meetingService
@inject ITaskService taskService
@inject NavigationManager navMgr
<AuthorizeView>
    <NotAuthorized>
        <label>You must be logged in to perform that action</label>
    </NotAuthorized>
    <Authorized>
        @if (projectLoaded == null)
        {
            <h3>Loading...</h3>
        }
        else
        {
            @if (@context.User.Claims.First(c => c.Type.Equals("Id")).Value.Equals(projectLoaded.Team.TeamLeader.Id.ToString()))
            {
                <div class="editProfile">
                    <button class="acceptbtn" @onclick="@(() => navMgr.NavigateTo($"/editProject/{Id}"))">Edit project</button>
                    <button class="deletebtn" @onclick="@(() => navMgr.NavigateTo("/"))">Delete project</button>
                </div>
            }
            <h3>@projectLoaded.Name</h3>
            <hr/>
            <TabControl>
                <TabPage Text="Calendar">
                    @if (@context.User.Claims.First(c => c.Type.Equals("Id")).Value.Equals(projectLoaded.Team.TeamLeader.Id.ToString()))
                    {
                        <button class="acceptbtn" @onclick="@(() => meetingPopup.CreatePopup.Show())">Create meeting</button>
                    }
                    <RadzenScheduler style="height: 768px;" Data="@meetings" TItem="MeetingEntity" StartProperty="StartDate" EndProperty="EndDate"
                                     TextProperty="Title" SelectedIndex="2" AppointmentSelect="OnMeetingSelect">
                        <RadzenDayView/>
                        <RadzenWeekView/>
                        <RadzenMonthView/>
                    </RadzenScheduler>
                </TabPage>
                <TabPage Text="Board">
                    <button class="acceptbtn" @onclick="@(() => taskPopup.CreatePopup.Show())">Create task</button>
                    @if (tasks.Count() == 0)
                    {
                        <p>There are no tasks yet for this project.</p>
                    }
                    else
                    {
                        <div class="container">
                            <div class="row">
                                <div class="col-4">
                                    <h4>Todo:</h4>
                                    @foreach (TaskEntity task in tasks.Where(task => task.Status.Equals("Todo")))
                                    {
                                        <div class="task todo" @onclick="(() => OnTaskSelect(task))">
                                            <p id="title">@task.Title</p>
                                            @if (task.memberAssigned != null)
                                            {
                                                <p id="assigned">Assigned to: @task.memberAssigned.FullName</p>
                                            }
                                            else
                                            {
                                                <p id="assigned">Not assigned yet</p>
                                            }
                                            <p id="timeest">Time estimated: @task.TimeEstimation.TimeOfDay</p>
                                        </div>
                                    }
                                </div>
                                <div class="col-4">
                                    <h4>In progress:</h4>
                                    @foreach (TaskEntity task in tasks.Where(task => task.Status.Equals("In progress")))
                                    {
                                        <div class="task inprogress"@onclick="(() => OnTaskSelect(task))">
                                            <p id="title">@task.Title</p>
                                            @if (task.memberAssigned != null)
                                            {
                                                <p id="assigned">Assigned to: @task.memberAssigned.FullName</p>
                                            }
                                            else
                                            {
                                                <p id="assigned">Not assigned yet</p>
                                            }
                                            <p id="timeest">Time estimated: @task.TimeEstimation.TimeOfDay</p>
                                        </div>
                                    }
                                </div>
                                <div class="col-4">
                                    <h4>Completed:</h4>
                                    @foreach (TaskEntity task in tasks.Where(task => task.Status.Equals("Completed")))
                                    {
                                        <div class="task completed" @onclick="(() => OnTaskSelect(task))">
                                            <p id="title">@task.Title</p>
                                            @if (task.memberAssigned != null)
                                            {
                                                <p id="assigned">Assigned to: @task.memberAssigned.FullName</p>
                                            }
                                            else
                                            {
                                                <p id="assigned">Not assigned yet</p>
                                            }
                                            <p id="timeest">Time estimated: @task.TimeEstimation.TimeOfDay</p>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </TabPage>
                <TabPage Text="Requirements">
                    @if (projectLoaded.Requirements.Count() == 0)
                    {
                        <p>This project does not have any requirements</p>
                    }
                    else
                    {
                        @foreach (RequirementEntity requirement in projectLoaded.Requirements)
                        {
                            <div class="card">
                                <p style="border: 1px solid; padding: 5px">@requirement.content</p>
                            </div>
                        }
                    }
                </TabPage>
                <TabPage Text="Logbook">
                    @if (LogBookEntity != null)
                    {
                        <p>meetings:</p>
                        <select class="form-control"  @bind="MeetingId" >
                            @foreach (MeetingEntity meeting in meetings)
                            {
                                @foreach (LogBookEntryEntity logBookEntryEntity in entries)
                                {
                                    if (meeting.Id.Equals(logBookEntryEntity.IdMeeting.Id)==false)
                                    {
                                        <option class="card" value="@meeting.Id">
                                            <p style="border: 1px solid; padding: 5px">@meeting.Title</p>
                                        </option>
                                    }
                                }
                            }
                        </select>
                        <p>entries:</p>
                        
                        // <button class="acceptbtn" @onclick="@(() => UpdateLogbook())">Create entry</button>
                        @if (LogBookEntity.Entries !=null)
                        {
                            <select class="form-control" @bind="@id" >
                                @foreach (LogBookEntryEntity logBookEntry in LogBookEntity.Entries)
                                {
                                    <option class="card" value="@logBookEntry.Id">
                                        <p style="border: 1px solid; padding: 5px" >@logBookEntry.IdMeeting.Title id meeting:@logBookEntry.IdMeeting.Id id entry: @logBookEntry.Id id logbook:@logBookEntry.IdLogBook </p>
                                    </option>
                                }
                            </select>
                            <p style="border: 1px solid; padding: 5px">@content</p>
                            <button class="acceptbtn" @onclick="@(() => ShowEntry())">Show entry</button>
                            <button class="acceptbtn"@onclick="@(() => OnMeetingCreateSelect())">Create entry</button>
                        }
                    }
                </TabPage>
                <TabPage Text="Team availability">
                    <RadzenScheduler @ref=avalCalendar style="height: 768px;" Data="@teamAvailability" TItem="AvailabilityEntity" StartProperty="startHour" EndProperty="endHour" TextProperty="memberName">
                        <RadzenWeekView/>
                    </RadzenScheduler>
                </TabPage>
            </TabControl>
        }

        <MeetingPopup @ref="meetingPopup" ProjectLoaded="projectLoaded" CreateMeetingDTO="createMeetingDTO" SelectedMeeting="selectedMeeting" UpdateView="UpdateCalendar"></MeetingPopup>
        <LogbookPopup @ref="logbookPopup" ProjectLoaded="projectLoaded" CreateEntryDTO="createEntryDTO" SelectedMeetingCreate="selectedmeetingCreate" LogBookEntity="LogBookEntity" updateLogbookDTO="updateLogbookDTO"></LogbookPopup>
        <TaskPopup @ref="taskPopup" ProjectLoaded="projectLoaded" CreateTaskDTO="createTaskDTO" SelectedTask="selectedTask" UpdateView="UpdateBoard"></TaskPopup>

    </Authorized>
</AuthorizeView>

<style>
    .rz-button rz-next {
        opacity: 0 !important;
        pointer-events: none !important;
    }

    .rz-scheduler-nav {
        pointer-events: none !important;
        cursor: not-allowed !important;
        opacity: 0 !important;
        filter: alpha(opacity=65) !important;
        -webkit-box-shadow: none !important;
        box-shadow: none !important;
    }
</style>

@code {
    
    [Parameter]
    public int Id { get; set; }

    private string msg = "";
    private int MeetingId;
    private int id;
    private string content;
    private List<LogBookEntryEntity> entries = new List<LogBookEntryEntity>();
    private MeetingCreateDTO createMeetingDTO = new MeetingCreateDTO();
    private MeetingEntity selectedMeeting { get; set; }
    private MeetingEntity selectedmeetingCreate { get; set; }
    private LogBookEntryCreateDTO createEntryDTO { get; set; }
    
    private TaskCreateDTO createTaskDTO = new TaskCreateDTO();
    private TaskEntity selectedTask { get; set; }
    private LogBookUpdateDTO updateLogbookDTO{ get; set; }
    private TaskPopup taskPopup;
    private MeetingPopup meetingPopup;
    private LogbookPopup logbookPopup;
    private RadzenScheduler<AvailabilityEntity> avalCalendar;
    private ICollection<MeetingEntity> meetings { get; set; }
    private ICollection<TaskEntity> tasks { get; set; }
    private ProjectEntity projectLoaded { get; set; }
    private LogBookEntity LogBookEntity { get; set; }
    
    private List<AvailabilityEntity> teamAvailability = new List<AvailabilityEntity>();

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            LogBookEntity = await LogbookService.GetByProjectIdAsync(Id);
            projectLoaded = await projectService.GetByIdAsync(Id);
            meetings = await meetingService.GetByProjectIdAsync(Id);
            tasks = await taskService.GetByProjectIdAsync(Id);
            updateLogbookDTO = new LogBookUpdateDTO(LogBookEntity.Id)
            {
                entries = new List<LogBookEntryEntity>()
            };
            updateLogbookDTO.entries.AddRange(LogBookEntity.Entries);
            GetTeamAvailability();

            createMeetingDTO.AssignedLeader = projectLoaded.Team.TeamLeader.Id;
            createMeetingDTO.StartDate = DateTime.Now;
            createMeetingDTO.EndDate = DateTime.Now.AddHours(1);
            createMeetingDTO.ProjectAssigned = Id;

            createTaskDTO.projectAssigned = Id;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }


    private void OnTaskSelect(TaskEntity task)
    {
        selectedTask = task;

        taskPopup.DetailsPopup.Show();
    }

    private void OnMeetingSelect(SchedulerAppointmentSelectEventArgs<MeetingEntity> args)
    {
        selectedMeeting = args.Data;

        meetingPopup.DetailsPopup.Show();
    }

    
    
    private async Task UpdateCalendar()
    {
        try
        {
            meetings = await meetingService.GetByProjectIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task UpdateBoard()
    {
        try
        {
            tasks = await taskService.GetByProjectIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void OnMeetingCreateSelect()
    {
        try
        {
            foreach (MeetingEntity meeting in meetings)
            {
                if (meeting.Id.Equals(MeetingId))
                {
                    selectedmeetingCreate = meeting;
                    logbookPopup.CreateEntry.Show();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }

    private async Task ShowEntry()
    {
        try
        {
            foreach (LogBookEntryEntity entry in LogBookEntity.Entries)
            {
                if (entry.Id.Equals(id))
                {
                    Console.WriteLine(id);
                    Console.WriteLine(entry.content);
                    content = entry.content;
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    private void GetTeamAvailability()
    {
        List<AvailabilityEntity> totalAvailability = new List<AvailabilityEntity>();

        foreach (MemberEntity member in projectLoaded.Team.members)
        {
            totalAvailability.AddRange(member.Availability);
        }

        totalAvailability.AddRange(projectLoaded.Team.TeamLeader.Availability);

        int currentDayOfWeek = (int)(DateTime.Now.DayOfWeek + 6) % 7;
        DateTime currentDateTime = DateTime.Now.AddDays(-currentDayOfWeek);

        for (int i = 0; i < 7; i++)
        {
            AvailabilityEntity initial = new AvailabilityEntity()
            {
                Id = 1,
                memberName = projectLoaded.Team.Name,
                DayOfWeek = i,
                startHour = new DateTime(currentDateTime.Year, currentDateTime.Month, currentDateTime.Day, 8, 0, 0),
                endHour = new DateTime(currentDateTime.Year, currentDateTime.Month, currentDateTime.Day, 23, 0, 0)
            };

            if (totalAvailability.Where(aval => aval.DayOfWeek == i).Count() != 0)
            {
                foreach (AvailabilityEntity entity in totalAvailability.Where(aval => aval.DayOfWeek == i))
                {
                    initial = unionAvailability(initial, entity);
                }

                if (initial.startHour < initial.endHour)
                {
                    teamAvailability.Add(initial);
                }
            }

            currentDateTime = currentDateTime.AddDays(1);
            Console.WriteLine(currentDateTime);
        }
    }

    private AvailabilityEntity unionAvailability(AvailabilityEntity entity1, AvailabilityEntity entity2)
    {
        DateTime StartHour, EndHour;

        if (entity1.startHour < entity2.startHour)
        {
            StartHour = entity2.startHour;
        }
        else
        {
            StartHour = entity1.startHour;
        }

        if (entity1.endHour < entity2.endHour)
        {
            EndHour = entity1.endHour;
        }
        else
        {
            EndHour = entity2.endHour;
        }

        return new AvailabilityEntity()
        {
            Id = 1,
            memberName = projectLoaded.Team.Name,
            DayOfWeek = entity1.DayOfWeek,
            startHour = StartHour,
            endHour = EndHour
        };
    }

}