@page "/project/{id:int}"
@using Domain.DTOs
@using Domain.DTOs.Meeting
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using UIComponents
@using Radzen
@using Radzen.Blazor
@inject IProjectService projectService
@inject IMeetingService meetingService
@inject NavigationManager navMgr

<AuthorizeView>
    <NotAuthorized>
        <label>You must be logged in to perform that action</label>
    </NotAuthorized>
    <Authorized>
        @if(projectLoaded == null) {
            <h3>Loading...</h3>
        } else {
            //TODO: pass actual team instead
            @if (@context.User.Claims.First(c => c.Type.Equals("Id")).Value.Equals(projectLoaded.Team.TeamLeader.Id.ToString()))
            {
                <div class="editProfile">
                    <button class="acceptbtn" @onclick="@(() => navMgr.NavigateTo($"/editProject/{Id}"))">Edit project</button>
                    <button class="deletebtn" @onclick="@(() => navMgr.NavigateTo("/"))">Delete project</button>
                </div>
            }
            <h3>@projectLoaded.Name</h3>
            <hr />
            <TabControl>
                <TabPage Text="Calendar">
                    <button class="acceptbtn" @onclick="@(() => showCreateMeetingPopup = !showCreateMeetingPopup)">Create meeting</button>
                    <RadzenScheduler style="height: 768px;" Data="@meetings" TItem="BasicMeetingDTO" StartProperty="StartDate" EndProperty="EndDate" TextProperty="Title" SelectedIndex="2">
                        <RadzenDayView />
                        <RadzenWeekView />
                        <RadzenMonthView />
                    </RadzenScheduler>
                </TabPage>
                <TabPage Text="Board">
                    <p>Board placeholder</p>
                </TabPage>
                <TabPage Text="Requirements">
                    @if(projectLoaded.Requirements.Count() == 0) {
                        <p>This project does not have any requirements</p>
                    } else {
                        @foreach (RequirementEntity requirement in projectLoaded.Requirements)
                        {
                            <p style="border: 1px solid; padding: 5px">@requirement.content</p>
                        }
                    }                    
                </TabPage>
            </TabControl>
        }

        <Popup ShowPopup="showCreateMeetingPopup">
            <div class="form-group field">
                <label>Title:</label>
                <input type="text" @bind="@createMeetingDTO.Title" />
                <label>Description:</label>
                <input type="text" @bind="@createMeetingDTO.Description" />
                <label>Start date:</label>
                <RadzenDatePicker @bind-Value=@createMeetingDTO.StartDate TValue="DateTime" ShowTime=true HoursStep="1" MinutesStep="5" />
                <label>End date:</label>
                <RadzenDatePicker @bind-Value=@createMeetingDTO.EndDate TValue="DateTime" ShowTime=true HoursStep="1" MinutesStep="5" />
                <button class="acceptbtn" @onclick="CreateMeeting">Create meeting</button>
            </div>
        </Popup>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public int Id { get; set; }
    private string msg = "";

    private bool showCreateMeetingPopup = false;
    private MeetingCreateDTO createMeetingDTO = new MeetingCreateDTO();

    private ICollection<BasicMeetingDTO> meetings { get; set; }
    private ProjectEntity projectLoaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            projectLoaded = await projectService.GetByIdAsync(Id);
            meetings = await meetingService.GetByProjectIdAsync(Id);

            createMeetingDTO.AssignedLeader = projectLoaded.Team.TeamLeader.Id;
            createMeetingDTO.StartDate = DateTime.Now;
            createMeetingDTO.EndDate = DateTime.Now.AddHours(1);
            createMeetingDTO.ProjectAssigned = Id;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task CreateMeeting() {
        await meetingService.CreateAsync(createMeetingDTO);

        showCreateMeetingPopup = false;

        try {
            meetings = await meetingService.GetByProjectIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}
