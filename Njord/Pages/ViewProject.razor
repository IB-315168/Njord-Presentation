@page "/project/{id:int}"
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using UIComponents
@using Radzen
@using Radzen.Blazor
@inject IProjectService projectService
@inject NavigationManager navMgr
<AuthorizeView>
    <NotAuthorized>
        <label>You must be logged in to perform that action</label>
    </NotAuthorized>
    <Authorized>
        @if(projectLoaded == null) {
            <h3>Loading...</h3>
        } else {
            <h3>@projectLoaded.Name</h3>
            <hr />
            <TabControl>
                <TabPage Text="Calendar">
                    <RadzenScheduler style="height: 768px;" Data="@data" TItem="DataItem" StartProperty="Start" EndProperty="End" TextProperty="Text" SelectedIndex="2">
                        <RadzenDayView />
                        <RadzenWeekView />
                        <RadzenMonthView />
                    </RadzenScheduler>
                </TabPage>
                <TabPage Text="Board">
                    <p>Board placeholder</p>
                </TabPage>
                <TabPage Text="Requirements">
                    <p>Requirements placeholder</p>
                </TabPage>
            </TabControl>
        }
    </Authorized>
</AuthorizeView>

@code {
    //Radzen Scheduler

    class DataItem
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; }
    }

    DataItem[] data = new DataItem[]
    {
      new DataItem
      {
        Start = DateTime.Today,
        End = DateTime.Today.AddDays(1),
        Text = "Blazor test"
      },
      new DataItem
      {
          Start = new DateTime(2022, 12, 24),
          End = new DateTime(2022, 12, 24).AddDays(1),
          Text = "Christmas"
      },
      new DataItem
      {
          Start = new DateTime(2022, 11, 25, 11, 50, 0),
          End = new DateTime(2022, 11, 25, 12, 45, 0),
          Text = "Meeting - JOOK"
      },
    };

    //Radzen Scheduler




    [Parameter]
    public int Id { get; set; }
    private string msg = "";

    private Project projectLoaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            projectLoaded = await projectService.GetByIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}
