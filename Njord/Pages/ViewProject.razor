@page "/project/{id:int}"
@using Domain.DTOs
@using Domain.DTOs.Meeting
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using UIComponents
@using Radzen
@using Radzen.Blazor
@inject IProjectService projectService
@inject IMeetingService meetingService
@inject NavigationManager navMgr

<AuthorizeView>
    <NotAuthorized>
        <label>You must be logged in to perform that action</label>
    </NotAuthorized>
    <Authorized>
        @if(projectLoaded == null) {
            <h3>Loading...</h3>
        } else {
            @if (@context.User.Claims.First(c => c.Type.Equals("Id")).Value.Equals(projectLoaded.Team.TeamLeader.Id.ToString()))
            {
                <div class="editProfile">
                    <button class="acceptbtn" @onclick="@(() => navMgr.NavigateTo($"/editProject/{Id}"))">Edit project</button>
                    <button class="deletebtn" @onclick="@(() => navMgr.NavigateTo("/"))">Delete project</button>
                </div>
            }
            <h3>@projectLoaded.Name</h3>
            <hr />
            <TabControl>
                <TabPage Text="Calendar">
                    @if (@context.User.Claims.First(c => c.Type.Equals("Id")).Value.Equals(projectLoaded.Team.TeamLeader.Id.ToString()))
                    {
                        <button class="acceptbtn" @onclick="@(() => meetingPopup.CreatePopup.Show())">Create meeting</button>
                    }
                    <RadzenScheduler style="height: 768px;" Data="@meetings" TItem="MeetingEntity" StartProperty="StartDate" EndProperty="EndDate"
                                 TextProperty="Title" SelectedIndex="2" AppointmentSelect="OnMeetingSelect">
                        <RadzenDayView />
                        <RadzenWeekView />
                        <RadzenMonthView />
                    </RadzenScheduler>
                </TabPage>
                <TabPage Text="Board">
                    <p>Board placeholder</p>
                </TabPage>
                <TabPage Text="Requirements">
                    @if(projectLoaded.Requirements.Count() == 0) {
                        <p>This project does not have any requirements</p>
                    } else {
                        @foreach (RequirementEntity requirement in projectLoaded.Requirements)
                        {
                            <p style="border: 1px solid; padding: 5px">@requirement.content</p>
                        }
                    }                    
                </TabPage>
            </TabControl>
        }

        <MeetingPopup @ref="meetingPopup" ProjectLoaded="projectLoaded" CreateMeetingDTO="createMeetingDTO" meetingUpdateDTO="meetingUpdateDTO" SelectedMeeting="selectedMeeting" UpdateView="UpdateCalendar"></MeetingPopup>

    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public int Id { get; set; }
    private string msg = "";

    private MeetingUpdateDTO meetingUpdateDTO { get; set; }
    private MeetingCreateDTO createMeetingDTO = new MeetingCreateDTO();
    private MeetingEntity selectedMeeting { get; set; }

    private Popup createPopup;
    private Popup editPopup;
    private Popup detailsPopup;

    private MeetingPopup meetingPopup;

    private ICollection<MeetingEntity> meetings { get; set; }
    private ProjectEntity projectLoaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            projectLoaded = await projectService.GetByIdAsync(Id);
            meetings = await meetingService.GetByProjectIdAsync(Id);

            createMeetingDTO.AssignedLeader = projectLoaded.Team.TeamLeader.Id;
            createMeetingDTO.StartDate = DateTime.Now;
            createMeetingDTO.EndDate = DateTime.Now.AddHours(1);
            createMeetingDTO.ProjectAssigned = Id;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task CreateMeeting() {
        try {
            await meetingService.CreateAsync(createMeetingDTO);

            createPopup.Close();

            meetings = await meetingService.GetByProjectIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task UpdateMeeting()
    {
        try
        {
            await meetingService.UpdateAsync(meetingUpdateDTO);

            editPopup.Close();

            meetings = await meetingService.GetByProjectIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task DeleteMeeting() {
        try {
            await meetingService.DeleteAsync(selectedMeeting.Id);

            selectedMeeting = null;
            detailsPopup.Close();

            meetings = await meetingService.GetByProjectIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void OnMeetingSelect(SchedulerAppointmentSelectEventArgs<MeetingEntity> args)
    {
        selectedMeeting = args.Data;

        meetingPopup.DetailsPopup.Show();
    }

    private void OnEdit()
    {
        meetingUpdateDTO = new MeetingUpdateDTO(selectedMeeting.Id);
        meetingUpdateDTO.Title = selectedMeeting.Title;
        meetingUpdateDTO.Description = selectedMeeting.Description;
        meetingUpdateDTO.StartDate = selectedMeeting.StartDate;
        meetingUpdateDTO.EndDate = selectedMeeting.EndDate;

        meetingPopup.DetailsPopup.Close();
        meetingPopup.EditPopup.Show();
    }

    private async Task UpdateCalendar() {
        try
        {
            meetings = await meetingService.GetByProjectIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}
