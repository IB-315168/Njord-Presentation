@page "/team/{id:int}"
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using UIComponents
@inject IUserService userService
@inject ITeamService teamService
@inject NavigationManager navMgr

@if (teamSelected == null)
{
    <label>Loading Team profile..</label>
}
else { 
    <AuthorizeView>
        <NotAuthorized><label>You must be logged in to perform that action</label></NotAuthorized>
        <Authorized>
            <h3>View team - @teamSelected.Name</h3>
            @if (teamSelected.TeamLeader.Id == 5)
            {
                <div class="editProfile">
                    <button class="acceptbtn" @onclick="@(() => navMgr.NavigateTo($"/editTeam/{teamSelected.Id}"))">Edit team</button> @* Navigate to EditTeam*@
                    <button class="deletebtn" @onclick="DeleteTeam">Delete team</button>
                </div>
            }
            <div class="details">
                <table>
                    <tr>
                        <td><b>Team name:</b></td>
                        <td>@teamSelected.Name</td>
                    </tr>
                    <tr>
                        <td><b>Team leader:</b></td>
                        <td class="members"><a href="/profile/@teamSelected.TeamLeader.Id">@teamSelected.TeamLeader.FullName (@teamSelected.TeamLeader.UserName)</a></td>
                    </tr>
                </table>
            </div>
            @if (teamSelected.members.Count == 0)
            {
                <label><br>This team does not have any members.</label>
            }
            else
            {
                <div class="members">
                    <h4>Members: </h4>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>User name</th>
                                <th>Full name</th>
                                <th>E-mail</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (User member in teamSelected.members)
                            {
                                <tr>
                                    <td><a href="/profile/@member.Id">@member.UserName</a></td>
                                    <td>@member.FullName</td>
                                    <td>@member.Email</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            <Popup ShowPopup="showPopup">
                <h3>Warning</h3>
                <label>You are about to delete this team. Confirm that action by typing <b>@teamSelected.Name</b> in field below.</label>
                <input type="text" @bind="removeConfirmation" />
                <button disabled="@(string.IsNullOrEmpty(removeConfirmation) || !removeConfirmation.Equals(teamSelected.Name))" @onclick="Proceed">Confirm</button>
            </Popup>
        </Authorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private string msg = "";

    private Team teamSelected = null!;

    private bool showPopup = false;
    private string removeConfirmation = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            teamSelected = await teamService.GetByIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void DeleteTeam() {
        showPopup = true;
    }

    private async Task Proceed() {
        msg = "";
        try
        {
            await teamService.DeleteAsync(Id);
            navMgr.NavigateTo("/", forceLoad: true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}
