@page "/editTeam/{id:int}"
@using Domain.DTOs
@using Domain.DTOs.Team
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using UIComponents
@inject IAuthService authService
@inject ITeamService teamService
@inject NavigationManager navMgr

@if(teamEdited == null) {
    <label>Loading team...</label>
}
else {
    <AuthorizeView>
        <NotAuthorized><label>You must be logged in to perform this action.</label></NotAuthorized>
        <Authorized>
            @if (!@context.User.Claims.First(c => c.Type.Equals("Id")).Value.Equals(teamEdited.TeamLeader.Id.ToString()))
            {
                <label>You are not authorized to perform this action.</label>
            } else {
                <h3>EditTeam - @teamEdited.Name</h3>

                <div class="form-group">
                    <div class="form-group field">
                        <label>Team name:</label>
                        <input type="text" @bind="teamName" />
                    </div>
                    <button class="acceptbtn" @onclick="SaveChanges">Save changes</button>
                </div>
                <h4>Manage team members</h4>
                <SearchMember Edit=true teamLeader=teamEdited.TeamLeader teamMembers="teamEdited.members" OnChange="@((member) => ChangeToTeam(member))"></SearchMember>
            }
        </Authorized>
    </AuthorizeView>  
}
    

@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private TeamEntity teamEdited = null!;
    private string msg = "";

    private TeamUpdateDTO dto = null!;
    private string teamName = "";

    protected override async Task OnInitializedAsync()
    {
        try {
            teamEdited = await teamService.GetByIdAsync(Id);
            teamName = teamEdited.Name;
            dto = new TeamUpdateDTO(Id)
            {
                Name = teamName,
                TeamLeader = teamEdited.TeamLeader,
                members = teamEdited.members
            };
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;

        }
    }

    private void ChangeToTeam(MemberEntity user) {
        if(dto.members.Contains(user)) {
            dto.members.Remove(user);
            Console.WriteLine($"Removed - {user.FullName} - {dto.members.Count()}");
        } else {
            dto.members.Add(user);
            Console.WriteLine($"Added - {user.FullName} - {dto.members.Count()}");
        }
    }

    private async Task SaveChanges() {
        try {
            dto.Name = teamName;
            await teamService.UpdateAsync(dto);
            navMgr.NavigateTo($"/team/{teamEdited.Id}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}
